generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  createdTopics Topic[]        @relation("CreatedBy")
  username      String?        @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  Subscription  Subscription[]
  posts         Post[]
  products      Product[]      @relation("ProductsPosted")
  votes         Vote[]
  ratings       Rating[]
  comments      Comment[]
  reviews       Review[]
  commentVotes  CommentVote[]
  wishlist      Product[]      @relation("ProductsWanted")
  teleHandle    String?
  bio           String?
}

model Topic {
  id          String         @id @default(cuid())
  name        String         @unique
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  posts       Post[]
  products    Product[]
  creatorId   String?
  Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
}

model Subscription {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  topic   Topic  @relation(fields: [topicId], references: [id])
  topicId String

  @@id([userId, topicId])
}

model Post {
  id        String    @id @default(cuid())
  topic     Topic     @relation(fields: [topicId], references: [id])
  topicId   String
  title     String
  content   Json?
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  votes     Vote[]
  comments  Comment[]
}

model Product {
  id          String    @id @default(cuid())
  topic       Topic     @relation(fields: [topicId], references: [id])
  topicId     String
  title       String
  price       Float
  content     Json?
  qtySold     Int
  poster      User      @relation("ProductsPosted", fields: [posterId], references: [id])
  posterId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  rating      Rating[]
  reviews     Review[]
  wantsItem   User      @relation("ProductsWanted", fields: [wantsItemId], references: [id])
  wantsItemId String
}

model Comment {
  id        String        @id @default(cuid())
  text      String
  createdAt DateTime      @default(now())
  author    User          @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  replyToId String?
  replyTo   Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[]     @relation("ReplyTo")
  votes     CommentVote[]
  commentId String?
}

model Review {
  id        String       @id @default(cuid())
  text      String
  createdAt DateTime     @default(now())
  author    User         @relation(fields: [authorId], references: [id])
  authorId  String
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  replyToId String?
  replyTo   Review?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Review[]     @relation("ReplyTo")
  commentId String?
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  type   VoteType

  @@id([userId, postId])
}

model Rating {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  rating    Float  

  @@id([userId, postId])
}

enum VoteType {
  UP
  DOWN
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      VoteType

  @@id([userId, commentId])
}